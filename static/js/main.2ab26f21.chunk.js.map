{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2ab26f21.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n\tArray.from(Array(STAGE_HEIGHT), () =>\r\n\t\tnew Array(STAGE_WIDTH).fill([ 0, 'clear' ])\r\n\t);\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\tfor (let y = 0; y < player.tetromino.length; y++) {\r\n\t\tfor (let x = 0; x < player.tetromino.length; x++) {\r\n\t\t\t// 1. Check that we're on an actual Tetromino cell\r\n\t\t\tif (player.tetromino[y][x] !== 0) {\r\n\t\t\t\tif (\r\n\t\t\t\t\t// 2. Check that our move is inside the game areas height (y)\r\n\t\t\t\t\t// We shouldn't go through the bottom of the play area\r\n\t\t\t\t\t!stage[y + player.pos.y + moveY] ||\r\n\t\t\t\t\t// 3. Check that our move is inside the game areas width (x)\r\n\t\t\t\t\t!stage[y + player.pos.y + moveY][\r\n\t\t\t\t\t\tx + player.pos.x + moveX\r\n\t\t\t\t\t] ||\r\n\t\t\t\t\t// 4. Check that the cell we're moving to isn't set to clear\r\n\t\t\t\t\tstage[y + player.pos.y + moveY][\r\n\t\t\t\t\t\tx + player.pos.x + moveX\r\n\t\t\t\t\t][1] !== 'clear'\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tbackground: url(${bgImage}) #000;\r\n\tbackground-size: cover;\r\n\toverflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n\tpadding: 40px;\r\n\tmargin: 0 auto;\r\n\tmax-width: 900px;\r\n\r\n\taside {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 200px;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0 20px;\r\n\t}\r\n`;\r\n","export const TETROMINOS = {\r\n\t0: { shape: [ [ 0 ] ], color: '0, 0, 0' },\r\n\tI: {\r\n\t\tshape: [\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ]\r\n\t\t],\r\n\t\tcolor: '80, 227, 230'\r\n\t},\r\n\tJ: {\r\n\t\tshape: [ [ 0, 'J', 0 ], [ 0, 'J', 0 ], [ 'J', 'J', 0 ] ],\r\n\t\tcolor: '36, 95, 223'\r\n\t},\r\n\tL: {\r\n\t\tshape: [ [ 0, 'L', 0 ], [ 0, 'L', 0 ], [ 0, 'L', 'L' ] ],\r\n\t\tcolor: '223, 173, 36'\r\n\t},\r\n\tO: {\r\n\t\tshape: [ [ 'O', 'O' ], [ 'O', 'O' ] ],\r\n\t\tcolor: '223, 217, 36'\r\n\t},\r\n\tS: {\r\n\t\tshape: [ [ 0, 'S', 'S' ], [ 0, 'S', 'S' ], [ 0, 0, 0 ] ],\r\n\t\tcolor: '48, 211, 56'\r\n\t},\r\n\tT: {\r\n\t\tshape: [ [ 0, 0, 0 ], [ 'T', 'T', 'T' ], [ 0, 'T', 0 ] ],\r\n\t\tcolor: '132, 61, 198'\r\n\t},\r\n\tZ: {\r\n\t\tshape: [ [ 'Z', 'Z', 0 ], [ 0, 'Z', 'Z' ], [ 0, 0, 0 ] ],\r\n\t\tcolor: '227, 78, 78'\r\n\t}\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n\tconst tetrominos = 'IJLOSTZ';\r\n\tconst randTetromino =\r\n\t\ttetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\treturn TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { randomTetromino, TETROMINOS } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n\tconst [ player, setPlayer ] = useState({\r\n\t\tpos: { x: 0, y: 0 },\r\n\t\ttetromino: TETROMINOS[0].shape,\r\n\t\tcollided: false\r\n\t});\r\n\r\n\tconst rotate = (matrix, dir) => {\r\n\t\t// Make the rows to become cols (transpose )\r\n\t\tconst rotatedTetro = matrix.map((_, index) =>\r\n\t\t\tmatrix.map((col) => col[index])\r\n\t\t);\r\n\t\t// Reverse each row to get a rotated matrix\r\n\t\tif (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n\t\treturn rotatedTetro.reverse();\r\n\t};\r\n\r\n\tconst playerRotate = (stage, dir) => {\r\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n\t\tconst pos = clonedPlayer.pos.x;\r\n\t\tlet offset = 1;\r\n\t\twhile (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n\t\t\tclonedPlayer.pos.x += offset;\r\n\t\t\toffset = -(offset + (offset > 0 ? 1 : -1));\r\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\r\n\t\t\t\trotate(clonedPlayer.tetromino, -dir);\r\n\t\t\t\tclonedPlayer.pos.x = pos;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetPlayer(clonedPlayer);\r\n\t};\r\n\r\n\tconst updatePlayerPos = ({ x, y, collided }) => {\r\n\t\tsetPlayer((prev) => ({\r\n\t\t\t...prev,\r\n\t\t\tpos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n\t\t\tcollided\r\n\t\t}));\r\n\t};\r\n\r\n\tconst resetPlayer = useCallback(() => {\r\n\t\tsetPlayer({\r\n\t\t\tpos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n\t\t\ttetromino: randomTetromino().shape,\r\n\t\t\tcollided: false\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn [ player, updatePlayerPos, resetPlayer, playerRotate ];\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\tconst [ stage, setStage ] = useState(createStage());\r\n\tconst [ rowsCleared, setRowsCleared ] = useState(0);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsetRowsCleared(0);\r\n\r\n\t\t\tconst sweepRows = (newStage) =>\r\n\t\t\t\tnewStage.reduce((ack, row) => {\r\n\t\t\t\t\tif (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n\t\t\t\t\t\tsetRowsCleared((prev) => prev + 1);\r\n\t\t\t\t\t\tack.unshift(\r\n\t\t\t\t\t\t\tnew Array(newStage[0].length).fill([ 0, 'clear' ])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn ack;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tack.push(row);\r\n\t\t\t\t\treturn ack;\r\n\t\t\t\t}, []);\r\n\r\n\t\t\tconst updateStage = (prevStage) => {\r\n\t\t\t\t// First flush the stage\r\n\t\t\t\tconst newStage = prevStage.map((row) =>\r\n\t\t\t\t\trow.map(\r\n\t\t\t\t\t\t(cell) => (cell[1] === 'clear' ? [ 0, 'clear' ] : cell)\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Then draw the tetromino\r\n\t\t\t\tplayer.tetromino.forEach((row, y) => {\r\n\t\t\t\t\trow.forEach((value, x) => {\r\n\t\t\t\t\t\tif (value !== 0) {\r\n\t\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\r\n\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`\r\n\t\t\t\t\t\t\t];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Then check if we collided\r\n\t\t\t\tif (player.collided) {\r\n\t\t\t\t\tresetPlayer();\r\n\t\t\t\t\treturn sweepRows(newStage);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn newStage;\r\n\t\t\t};\r\n\r\n\t\t\tsetStage((prev) => updateStage(prev));\r\n\t\t},\r\n\t\t[ player, resetPlayer ]\r\n\t);\r\n\r\n\treturn [ stage, setStage, rowsCleared ];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(\r\n\t\t${(props) => props.height},\r\n\t\tcalc(25vw / ${(props) => props.width})\r\n\t);\r\n\tgrid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n\tgrid-gap: 1px;\r\n\tborder: 2px solid #333;\r\n\twidth: 100%;\r\n\tmax-width: 25vw;\r\n\tbackground: #111;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\twidth: auto;\r\n\tbackground: rgba(${(props) => props.color}, 0.8);\r\n\tborder: ${(props) => (props.type === 0 ? '0px solid' : '3px solid')};\r\n\tborder-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n\tborder-right-color: rgba(${(props) => props.color}, 1);\r\n\tborder-top-color: rgba(${(props) => props.color}, 1);\r\n\tborder-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n\t<StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n\t<StyledStage width={stage[0].length} height={stage.length}>\r\n\t\t{stage.map((row) =>\r\n\t\t\trow.map((cell, x) => <Cell key={x} type={cell[0]} />)\r\n\t\t)}\r\n\t</StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n\tbox-sizing: border-box;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin: 0 0 20px 0;\r\n\tpadding: 20px;\r\n\tborder: 4px solid #333;\r\n\tmin-height: 30px;\r\n\twidth: 100%;\r\n\tborder-radius: 20px;\r\n\tcolor: ${(props) => (props.gameOver ? 'red' : '#999')};\r\n\tbackground: #000;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n\tfont-size: 0.8rem;\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => <StyledDisplay>{text}</StyledDisplay>;\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.div`\r\n\tbox-sizing: border-box;\r\n\tmargin: 0 0 20px 0;\r\n\tpadding: 20px;\r\n\tmin-height: 30px;\r\n\twidth: 100%;\r\n\tborder-radius: 20px;\r\n\tborder: none;\r\n\tcolor: white;\r\n\tbackground: #333;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n\tfont-size: 1rem;\r\n\toutline: none;\r\n\tcursor: pointer;\r\n\r\n\t&::selection {\r\n\t\tbackground: transparent;\r\n\t}\r\n`;\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n\t<StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n\tconst [ dropTime, setDropTime ] = useState(null);\r\n\tconst [ gameOver, setGameOver ] = useState(false);\r\n\r\n\tconst [ player, updatePlayerPos, resetPlayer, playerRotate ] = usePlayer();\r\n\tconst [ stage, setStage, rowsCleared ] = useStage(player, resetPlayer);\r\n\tconst [ score, setScore, rows, setRows, level, setLevel ] = useGameStatus(\r\n\t\trowsCleared\r\n\t);\r\n\r\n\tconst movePlayer = (dir) => {\r\n\t\tif (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n\t\t\tupdatePlayerPos({ x: dir, y: 0 });\r\n\t\t}\r\n\t};\r\n\r\n\tconst startGame = () => {\r\n\t\t// Reset Everything\r\n\t\tsetStage(createStage());\r\n\t\tsetDropTime(1000);\r\n\t\tresetPlayer();\r\n\t\tsetGameOver(false);\r\n\t\tsetScore(0);\r\n\t\tsetRows(0);\r\n\t\tsetLevel(1);\r\n\t};\r\n\r\n\tconst drop = () => {\r\n\t\t// Increase level when player has cleared 10 rows\r\n\t\tif (rows > (level + 1) * 10) {\r\n\t\t\tsetLevel((prev) => prev + 1);\r\n\t\t\t// Also increase speed\r\n\t\t\tsetDropTime(1000 / (level + 1) + 200);\r\n\t\t}\r\n\t\tif (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n\t\t\tupdatePlayerPos({ x: 0, y: 1, collided: false });\r\n\t\t} else {\r\n\t\t\t// Game Over\r\n\t\t\tif (player.pos.y < 1) {\r\n\t\t\t\tsetGameOver(true);\r\n\t\t\t\tsetDropTime(null);\r\n\t\t\t}\r\n\t\t\tupdatePlayerPos({ x: 0, y: 0, collided: true });\r\n\t\t}\r\n\t};\r\n\r\n\tconst keyUp = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\tif (keyCode === 40) {\r\n\t\t\t\tsetDropTime(1000 / (level + 1) + 200);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst dropPlayer = () => {\r\n\t\tsetDropTime(null);\r\n\t\tdrop();\r\n\t};\r\n\r\n\tconst move = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\tif (keyCode === 37) {\r\n\t\t\t\tmovePlayer(-1);\r\n\t\t\t} else if (keyCode === 39) {\r\n\t\t\t\tmovePlayer(1);\r\n\t\t\t} else if (keyCode === 40) {\r\n\t\t\t\tdropPlayer();\r\n\t\t\t} else if (keyCode === 38) {\r\n\t\t\t\tplayerRotate(stage, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tuseInterval(() => {\r\n\t\tdrop();\r\n\t}, dropTime);\r\n\r\n\treturn (\r\n\t\t<StyledTetrisWrapper\r\n\t\t\trole=\"button\"\r\n\t\t\ttabIndex=\"0\"\r\n\t\t\tonKeyDown={(e) => move(e)}\r\n\t\t\tonKeyUp={keyUp}\r\n\t\t>\r\n\t\t\t<StyledTetris>\r\n\t\t\t\t<Stage stage={stage} />\r\n\t\t\t\t<aside>\r\n\t\t\t\t\t{gameOver ? (\r\n\t\t\t\t\t\t<Display\r\n\t\t\t\t\t\t\tgameOver={gameOver}\r\n\t\t\t\t\t\t\ttext={`Game Over - Score: ${score}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Display text={`Score: ${score}`} />\r\n\t\t\t\t\t\t\t<Display text={`Rows: ${rows}`} />\r\n\t\t\t\t\t\t\t<Display text={`Level: ${level}`} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<StartButton callback={startGame} />\r\n\t\t\t\t</aside>\r\n\t\t\t</StyledTetris>\r\n\t\t</StyledTetrisWrapper>\r\n\t);\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n\tconst [ score, setScore ] = useState(0);\r\n\tconst [ rows, setRows ] = useState(0);\r\n\tconst [ level, setLevel ] = useState(0);\r\n\r\n\tconst linePoints = [ 40, 100, 300, 1200 ];\r\n\r\n\tconst calcScore = useCallback(\r\n\t\t() => {\r\n\t\t\t// We have score\r\n\t\t\tif (rowsCleared > 0) {\r\n\t\t\t\t// This is how original Tetris score is calculated\r\n\t\t\t\tsetScore((prev) => prev + linePoints[rowsCleared - 1] * level);\r\n\t\t\t\tsetRows((prev) => prev + rowsCleared);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ level, linePoints, rowsCleared ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tcalcScore();\r\n\t\t},\r\n\t\t[ calcScore, rowsCleared, score ]\r\n\t);\r\n\r\n\treturn [ score, setScore, rows, setRows, level, setLevel ];\r\n};\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport function useInterval(callback, delay) {\r\n\tconst savedCallback = useRef()\r\n\t// Remember the latest callback.\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsavedCallback.current = callback\r\n\t\t},\r\n\t\t[ callback ]\r\n\t)\r\n\r\n\t// Set up the interval.\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tfunction tick() {\r\n\t\t\t\tsavedCallback.current()\r\n\t\t\t}\r\n\t\t\tif (delay !== null) {\r\n\t\t\t\tconst id = setInterval(tick, delay)\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\tclearInterval(id)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ delay ]\r\n\t)\r\n}\r\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Tetris />\n\t</div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}