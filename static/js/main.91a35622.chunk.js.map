{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledControls.js","components/Controls.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","props","mediaQuery","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","StyledControls","Controls","clickHandler","className","e","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","startGame","drop","keyUp","keyCode","move","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","onKeyUp","action","actions","left","right","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.91a35622.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n\tArray.from(Array(STAGE_HEIGHT), () =>\r\n\t\tnew Array(STAGE_WIDTH).fill([ 0, 'clear' ])\r\n\t);\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\tfor (let y = 0; y < player.tetromino.length; y++) {\r\n\t\tfor (let x = 0; x < player.tetromino.length; x++) {\r\n\t\t\t// 1. Check that we're on an actual Tetromino cell\r\n\t\t\tif (player.tetromino[y][x] !== 0) {\r\n\t\t\t\tif (\r\n\t\t\t\t\t// 2. Check that our move is inside the game areas height (y)\r\n\t\t\t\t\t// We shouldn't go through the bottom of the play area\r\n\t\t\t\t\t!stage[y + player.pos.y + moveY] ||\r\n\t\t\t\t\t// 3. Check that our move is inside the game areas width (x)\r\n\t\t\t\t\t!stage[y + player.pos.y + moveY][\r\n\t\t\t\t\t\tx + player.pos.x + moveX\r\n\t\t\t\t\t] ||\r\n\t\t\t\t\t// 4. Check that the cell we're moving to isn't set to clear\r\n\t\t\t\t\tstage[y + player.pos.y + moveY][\r\n\t\t\t\t\t\tx + player.pos.x + moveX\r\n\t\t\t\t\t][1] !== 'clear'\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tbackground: url(${bgImage}) #000;\r\n\tbackground-size: cover;\r\n\toverflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: flex-start;\r\n\tpadding: 5vh;\r\n\tmargin: 0 auto;\r\n\tmax-width: 900px;\r\n\r\n\taside {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 300px;\r\n\t\tmin-width: 200px;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0 20px;\r\n\t}\r\n\r\n\t@${(props) => props.mediaQuery} {\r\n\t\tflex-direction: column-reverse;\r\n\t\talign-items: center;\r\n\t\tpadding: 5vw 2vw;\r\n\r\n\t\taside {\r\n\t\t\twidth: 100%;\r\n\t\t\tmax-width: 100%;\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-direction: column;\r\n\t\t\tpadding: 0 2px;\r\n\t\t\tmin-height: 132px;\r\n\r\n\t\t\t.display-area {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-wrap: wrap;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","export const TETROMINOS = {\r\n\t0: { shape: [ [ 0 ] ], color: '0, 0, 0' },\r\n\tI: {\r\n\t\tshape: [\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ],\r\n\t\t\t[ 0, 'I', 0, 0 ]\r\n\t\t],\r\n\t\tcolor: '80, 227, 230'\r\n\t},\r\n\tJ: {\r\n\t\tshape: [ [ 0, 'J', 0 ], [ 0, 'J', 0 ], [ 'J', 'J', 0 ] ],\r\n\t\tcolor: '36, 95, 223'\r\n\t},\r\n\tL: {\r\n\t\tshape: [ [ 0, 'L', 0 ], [ 0, 'L', 0 ], [ 0, 'L', 'L' ] ],\r\n\t\tcolor: '223, 173, 36'\r\n\t},\r\n\tO: {\r\n\t\tshape: [ [ 'O', 'O' ], [ 'O', 'O' ] ],\r\n\t\tcolor: '223, 217, 36'\r\n\t},\r\n\tS: {\r\n\t\tshape: [ [ 0, 'S', 'S' ], [ 0, 'S', 'S' ], [ 0, 0, 0 ] ],\r\n\t\tcolor: '48, 211, 56'\r\n\t},\r\n\tT: {\r\n\t\tshape: [ [ 0, 0, 0 ], [ 'T', 'T', 'T' ], [ 0, 'T', 0 ] ],\r\n\t\tcolor: '132, 61, 198'\r\n\t},\r\n\tZ: {\r\n\t\tshape: [ [ 'Z', 'Z', 0 ], [ 0, 'Z', 'Z' ], [ 0, 0, 0 ] ],\r\n\t\tcolor: '227, 78, 78'\r\n\t}\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n\tconst tetrominos = 'IJLOSTZ';\r\n\tconst randTetromino =\r\n\t\ttetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\treturn TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { randomTetromino, TETROMINOS } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n\tconst [ player, setPlayer ] = useState({\r\n\t\tpos: { x: 0, y: 0 },\r\n\t\ttetromino: TETROMINOS[0].shape,\r\n\t\tcollided: false\r\n\t});\r\n\r\n\tconst rotate = (matrix, dir) => {\r\n\t\t// Make the rows to become cols (transpose )\r\n\t\tconst rotatedTetro = matrix.map((_, index) =>\r\n\t\t\tmatrix.map((col) => col[index])\r\n\t\t);\r\n\t\t// Reverse each row to get a rotated matrix\r\n\t\tif (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n\t\treturn rotatedTetro.reverse();\r\n\t};\r\n\r\n\tconst playerRotate = (stage, dir) => {\r\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n\t\tconst pos = clonedPlayer.pos.x;\r\n\t\tlet offset = 1;\r\n\t\twhile (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n\t\t\tclonedPlayer.pos.x += offset;\r\n\t\t\toffset = -(offset + (offset > 0 ? 1 : -1));\r\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\r\n\t\t\t\trotate(clonedPlayer.tetromino, -dir);\r\n\t\t\t\tclonedPlayer.pos.x = pos;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetPlayer(clonedPlayer);\r\n\t};\r\n\r\n\tconst updatePlayerPos = ({ x, y, collided }) => {\r\n\t\tsetPlayer((prev) => ({\r\n\t\t\t...prev,\r\n\t\t\tpos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n\t\t\tcollided\r\n\t\t}));\r\n\t};\r\n\r\n\tconst resetPlayer = useCallback(() => {\r\n\t\tsetPlayer({\r\n\t\t\tpos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n\t\t\ttetromino: randomTetromino().shape,\r\n\t\t\tcollided: false\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn [ player, updatePlayerPos, resetPlayer, playerRotate ];\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\tconst [ stage, setStage ] = useState(createStage());\r\n\tconst [ rowsCleared, setRowsCleared ] = useState(0);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsetRowsCleared(0);\r\n\r\n\t\t\tconst sweepRows = (newStage) =>\r\n\t\t\t\tnewStage.reduce((ack, row) => {\r\n\t\t\t\t\tif (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n\t\t\t\t\t\tsetRowsCleared((prev) => prev + 1);\r\n\t\t\t\t\t\tack.unshift(\r\n\t\t\t\t\t\t\tnew Array(newStage[0].length).fill([ 0, 'clear' ])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn ack;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tack.push(row);\r\n\t\t\t\t\treturn ack;\r\n\t\t\t\t}, []);\r\n\r\n\t\t\tconst updateStage = (prevStage) => {\r\n\t\t\t\t// First flush the stage\r\n\t\t\t\tconst newStage = prevStage.map((row) =>\r\n\t\t\t\t\trow.map(\r\n\t\t\t\t\t\t(cell) => (cell[1] === 'clear' ? [ 0, 'clear' ] : cell)\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Then draw the tetromino\r\n\t\t\t\tplayer.tetromino.forEach((row, y) => {\r\n\t\t\t\t\trow.forEach((value, x) => {\r\n\t\t\t\t\t\tif (value !== 0) {\r\n\t\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\r\n\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`\r\n\t\t\t\t\t\t\t];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Then check if we collided\r\n\t\t\t\tif (player.collided) {\r\n\t\t\t\t\tresetPlayer();\r\n\t\t\t\t\treturn sweepRows(newStage);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn newStage;\r\n\t\t\t};\r\n\r\n\t\t\tsetStage((prev) => updateStage(prev));\r\n\t\t},\r\n\t\t[ player, resetPlayer ]\r\n\t);\r\n\r\n\treturn [ stage, setStage, rowsCleared ];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(\r\n\t\t${(props) => props.height},\r\n\t\tcalc(80vh / ${(props) => props.height})\r\n\t);\r\n\tgrid-template-columns: repeat(\r\n\t\t${(props) => props.width},\r\n\t\tcalc(80vh / ${(props) => props.height})\r\n\t);\r\n\tgrid-gap: 1px;\r\n\tborder: 2px solid #333;\r\n\tbackground: #111;\r\n\r\n\t@${(props) => props.mediaQuery} {\r\n\t\tgrid-template-rows: repeat(\r\n\t\t\t${(props) => props.height},\r\n\t\t\tcalc(50vh / ${(props) => props.height})\r\n\t\t);\r\n\t\tgrid-template-columns: repeat(\r\n\t\t\t${(props) => props.width},\r\n\t\t\tcalc(50vh / ${(props) => props.height})\r\n\t\t);\r\n\t\tmargin-top: 1vh;\r\n\t}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\twidth: auto;\r\n\tbackground: rgba(${(props) => props.color}, 0.8);\r\n\tborder: ${(props) => (props.type === 0 ? '0px solid' : '3px solid')};\r\n\tborder-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n\tborder-right-color: rgba(${(props) => props.color}, 1);\r\n\tborder-top-color: rgba(${(props) => props.color}, 1);\r\n\tborder-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n\t<StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage, mediaQuery }) => (\r\n\t<StyledStage\r\n\t\twidth={stage[0].length}\r\n\t\theight={stage.length}\r\n\t\tmediaQuery={mediaQuery}\r\n\t>\r\n\t\t{stage.map((row) =>\r\n\t\t\trow.map((cell, x) => <Cell key={x} type={cell[0]} />)\r\n\t\t)}\r\n\t</StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n\tbox-sizing: border-box;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin: 0 0 2vh 0;\r\n\tpadding: 2vh;\r\n\tborder: 4px solid #333;\r\n\tmin-height: 3vh;\r\n\twidth: 100%;\r\n\tborder-radius: 20px;\r\n\tcolor: ${(props) => (props.gameOver ? 'red' : '#999')};\r\n\tbackground: #000;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n\tfont-size: 1rem;\r\n\r\n\t@${(props) => props.mediaQuery} {\r\n\t\tflex-wrap: wrap;\r\n\t\twidth: 46%;\r\n\t\tmin-height: 15px;\r\n\t\tfont-size: 0.6rem;\r\n\t\tmargin: 1vh 2%;\r\n\t}\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ text, mediaQuery }) => (\r\n\t<StyledDisplay mediaQuery={mediaQuery}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.div`\r\n\tbox-sizing: border-box;\r\n\tmargin: 0 0 2vh 0;\r\n\tpadding: 20px;\r\n\tmin-height: 30px;\r\n\twidth: 100%;\r\n\tborder-radius: 20px;\r\n\tborder: none;\r\n\tcolor: white;\r\n\tbackground: #333;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n\tfont-size: 1rem;\r\n\toutline: none;\r\n\tcursor: pointer;\r\n\r\n\t&::selection {\r\n\t\tbackground: transparent;\r\n\t}\r\n\r\n\t@${(props) => props.mediaQuery} {\r\n\t\twidth: 46%;\r\n\t\tfont-size: .8rem;\r\n\t\tmin-height: 15px;\r\n\t\tfont-size: minmax(3vmin, 14px);\r\n\t\tmargin: 1vh 2%;\r\n\t}\r\n`;\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback, mediaQuery }) => (\r\n\t<StyledStartButton onClick={callback} mediaQuery={mediaQuery}>\r\n\t\tStart Game\r\n\t</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledControls = styled.div`\r\n\tdisplay: none;\r\n\r\n\t@${(props) => props.mediaQuery} {\r\n        position: fixed;\r\n        bottom: 0;\r\n        left: 0\r\n\t\twidth: 100%;\r\n\t\theight: calc(100vh - 32vh - 50vh);\r\n        color: #999;\r\n        display: block;\r\n\r\n\t\t.row {\r\n\t\t\twidth: 100%;\r\n            height: 50%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            font-size: 3rem;\r\n\r\n            div {\r\n                border-radius: 20px;\r\n                height: 80%;\r\n                border: 3px solid rgb(51, 51, 51);\r\n                background: black;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                cursor: pointer;\r\n                user-select: none;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.drop {\r\n            margin: 0 auto;\r\n            \r\n            div {\r\n                width: 66%;\r\n                padding-bottom: 2%;\r\n            }\r\n\t\t}\r\n\r\n\t\t.translate {\r\n            display: flex;\r\n            justify-content: space-between;\r\n\r\n\t\t\tdiv {\r\n                width: 30%;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","import React from 'react';\r\nimport { StyledControls } from './styles/StyledControls';\r\n\r\nconst Controls = ({ clickHandler, mediaQuery }) => {\r\n\treturn (\r\n\t\t<StyledControls mediaQuery={mediaQuery}>\r\n\t\t\t<div className=\"row drop\">\r\n\t\t\t\t<div onClick={(e) => clickHandler('drop')}>&darr;</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row translate\">\r\n\t\t\t\t<div onClick={(e) => clickHandler('left')}>&larr;</div>\r\n\t\t\t\t<div onClick={(e) => clickHandler('rotate')}>&#8635;</div>\r\n\t\t\t\t<div onClick={(e) => clickHandler('right')}>&rarr;</div>\r\n\t\t\t</div>\r\n\t\t</StyledControls>\r\n\t);\r\n};\r\n\r\nexport default Controls;\r\n","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\nimport Controls from './Controls';\r\n\r\nconst Tetris = () => {\r\n\tconst [ dropTime, setDropTime ] = useState(null);\r\n\tconst [ gameOver, setGameOver ] = useState(false);\r\n\r\n\tconst [ player, updatePlayerPos, resetPlayer, playerRotate ] = usePlayer();\r\n\tconst [ stage, setStage, rowsCleared ] = useStage(player, resetPlayer);\r\n\tconst [ score, setScore, rows, setRows, level, setLevel ] = useGameStatus(\r\n\t\trowsCleared\r\n\t);\r\n\r\n\tconst mediaQuery =\r\n\t\t'media only screen and (not(pointer)) and (not(hover)), (max-width: 600px), (max-device-width: 1024px)';\r\n\r\n\tconst movePlayer = (dir) => {\r\n\t\tif (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n\t\t\tupdatePlayerPos({ x: dir, y: 0 });\r\n\t\t}\r\n\t};\r\n\r\n\tconst startGame = () => {\r\n\t\t// Reset Everything\r\n\t\tsetStage(createStage());\r\n\t\tsetDropTime(1000);\r\n\t\tresetPlayer();\r\n\t\tsetGameOver(false);\r\n\t\tsetScore(0);\r\n\t\tsetRows(0);\r\n\t\tsetLevel(1);\r\n\t};\r\n\r\n\tconst drop = () => {\r\n\t\t// Increase level when player has cleared 10 rows\r\n\t\tif (rows > (level + 1) * 10) {\r\n\t\t\tsetLevel((prev) => prev + 1);\r\n\t\t\t// Also increase speed\r\n\t\t\tsetDropTime(1000 / (level + 1) + 200);\r\n\t\t}\r\n\t\tif (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n\t\t\tupdatePlayerPos({ x: 0, y: 1, collided: false });\r\n\t\t} else {\r\n\t\t\t// Game Over\r\n\t\t\tif (player.pos.y < 1) {\r\n\t\t\t\tsetGameOver(true);\r\n\t\t\t\tsetDropTime(null);\r\n\t\t\t}\r\n\t\t\tupdatePlayerPos({ x: 0, y: 0, collided: true });\r\n\t\t}\r\n\t};\r\n\r\n\tconst keyUp = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\tif (keyCode === 40) {\r\n\t\t\t\tsetDropTime(1000 / (level + 1) + 200);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst dropPlayer = () => {\r\n\t\tsetDropTime(null);\r\n\t\tdrop();\r\n\t};\r\n\r\n\tconst move = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\tif (keyCode === 37) {\r\n\t\t\t\tmovePlayer(-1);\r\n\t\t\t} else if (keyCode === 39) {\r\n\t\t\t\tmovePlayer(1);\r\n\t\t\t} else if (keyCode === 40) {\r\n\t\t\t\tdropPlayer();\r\n\t\t\t} else if (keyCode === 38) {\r\n\t\t\t\tplayerRotate(stage, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClick = (action) => {\r\n\t\tconst actions = {\r\n\t\t\tdrop: { keyCode: 40 },\r\n\t\t\tleft: { keyCode: 37 },\r\n\t\t\trotate: { keyCode: 38 },\r\n\t\t\tright: { keyCode: 39 }\r\n\t\t};\r\n\r\n\t\tmove(actions[action]);\r\n\t\tkeyUp(actions[action]);\r\n\t};\r\n\r\n\tuseInterval(() => {\r\n\t\tdrop();\r\n\t}, dropTime);\r\n\r\n\treturn (\r\n\t\t<StyledTetrisWrapper\r\n\t\t\trole=\"button\"\r\n\t\t\ttabIndex=\"0\"\r\n\t\t\tonKeyDown={(e) => move(e)}\r\n\t\t\tonKeyUp={keyUp}\r\n\t\t>\r\n\t\t\t<StyledTetris mediaQuery={mediaQuery}>\r\n\t\t\t\t<Stage stage={stage} mediaQuery={mediaQuery} />\r\n\t\t\t\t<aside>\r\n\t\t\t\t\t{gameOver ? (\r\n\t\t\t\t\t\t<div className=\"display-area\">\r\n\t\t\t\t\t\t\t<Display\r\n\t\t\t\t\t\t\t\ttext={`Game Over - Score: ${score}`}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<StartButton\r\n\t\t\t\t\t\t\t\tclassName=\"start-button\"\r\n\t\t\t\t\t\t\t\tcallback={startGame}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className=\"display-area\">\r\n\t\t\t\t\t\t\t<Display\r\n\t\t\t\t\t\t\t\ttext={`Score: ${score}`}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Display\r\n\t\t\t\t\t\t\t\ttext={`Rows: ${rows}`}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Display\r\n\t\t\t\t\t\t\t\ttext={`Level: ${level}`}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<StartButton\r\n\t\t\t\t\t\t\t\tclassName=\"start-button\"\r\n\t\t\t\t\t\t\t\tcallback={startGame}\r\n\t\t\t\t\t\t\t\tmediaQuery={mediaQuery}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</aside>\r\n\t\t\t</StyledTetris>\r\n\t\t\t<Controls clickHandler={handleClick} mediaQuery={mediaQuery} />\r\n\t\t</StyledTetrisWrapper>\r\n\t);\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n\tconst [ score, setScore ] = useState(0);\r\n\tconst [ rows, setRows ] = useState(0);\r\n\tconst [ level, setLevel ] = useState(0);\r\n\r\n\tconst linePoints = [ 40, 100, 300, 1200 ];\r\n\r\n\tconst calcScore = useCallback(\r\n\t\t() => {\r\n\t\t\t// We have score\r\n\t\t\tif (rowsCleared > 0) {\r\n\t\t\t\t// This is how original Tetris score is calculated\r\n\t\t\t\tsetScore((prev) => prev + linePoints[rowsCleared - 1] * level);\r\n\t\t\t\tsetRows((prev) => prev + rowsCleared);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ level, linePoints, rowsCleared ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tcalcScore();\r\n\t\t},\r\n\t\t[ calcScore, rowsCleared, score ]\r\n\t);\r\n\r\n\treturn [ score, setScore, rows, setRows, level, setLevel ];\r\n};\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport function useInterval(callback, delay) {\r\n\tconst savedCallback = useRef()\r\n\t// Remember the latest callback.\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tsavedCallback.current = callback\r\n\t\t},\r\n\t\t[ callback ]\r\n\t)\r\n\r\n\t// Set up the interval.\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tfunction tick() {\r\n\t\t\t\tsavedCallback.current()\r\n\t\t\t}\r\n\t\t\tif (delay !== null) {\r\n\t\t\t\tconst id = setInterval(tick, delay)\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\tclearInterval(id)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ delay ]\r\n\t)\r\n}\r\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Tetris />\n\t</div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}